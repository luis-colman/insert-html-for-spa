{
  "plugin_type": "widget",
  "name": "Insert HTML for SPAs",
  "edit_page_url": "http://atticandbutton.com",
  "form_schema": [
    {
      "default_value": "",
      "field_type": "selector",
      "name": "reference_element",
      "label": "Reference Element",
      "options": null
    },
    {
      "default_value": "beforebegin",
      "field_type": "dropdown",
      "name": "insert_position",
      "label": "Insert Position",
      "options": {
        "choices": [
          {
            "value": "beforebegin",
            "label": "Before"
          },
          {
            "value": "afterend",
            "label": "After"
          },
          {
            "value": "beforeend",
            "label": "At the end of"
          },
          {
            "value": "afterbegin",
            "label": "At the beginning"
          }
        ]
      }
    },
    {
      "default_value": "",
      "field_type": "html",
      "name": "html_content",
      "label": "HTML Content",
      "options": null
    }
  ],
  "description": "Extension for SPAs to persist HTML content inserted.\n(Created for SPAs that flush content inserted by the standard InsertHTML feature of the Visual Editor)",
  "options": {
    "apply_js": "// Function that will capture the Page ID associated with this extension change\nfunction onActionApplied(event) {\n  window['page_'+extension.$instance] = event.data.pageId;\n}\n\n// Event listener to fire function to capture \nwindow.optimizely.push({\n  'type': 'addListener',\n  'filter': {\n    'type': 'action',\n    'name': 'applied'\n  },\n  'handler': onActionApplied\n});\n\nvar vars = {};\nvars['selectorField_'+extension.$instance] = extension.reference_element;\nvars['htmlContent_'+extension.$instance] = extension.html_content;\n\n// Apply actions only if extension fields are not empty\nif (vars['selectorField_'+extension.$instance] !== '' && vars['htmlContent_'+extension.$instance] !== '') {\n  \n  // Function that will insert new HTML content\n  function insertHtml() {\n    var newHtml = document.createElement('span');\n    newHtml.innerHTML = extension.html_content;\n    newHtml.setAttribute('optly-change-'+extension.$instance,'');\n    document.querySelector(extension.reference_element).insertAdjacentElement(extension.insert_position, newHtml);\n  }\n  \n  // 1) Retrieve the utils library\n  var utils = window['optimizely'].get('utils');\n\n  // 2) Wait for reference element to exist in the DOM\n  utils.waitForElement(extension.reference_element).then(function() {\n\n    // 3) Apply change before activating the MutationObserver\n    document.querySelector(extension.reference_element).parentNode.setAttribute('optly-'+extension.$instance,'');\n    if (!document.querySelector('[optly-change-'+extension.$instance+']')) {\n      insertHtml();\n    } else {\n    \tdocument.querySelector('[optly-change-'+extension.$instance+']').innerHTML = extension.html_content;\n    }\n\n    // 4) Define element to observe\n    vars['target_'+extension.$instance] = document.querySelector('[optly-'+extension.$instance+']');\n\n    // 5) MutationObserver Config Options\n    vars['config_'+extension.$instance] = {\n      //attributes: true,  // uncomment line if ever needed\n      //characterData: true, // uncomment line if ever needed\n      childList: true,\n      //subtree: true\n    };\n\n    // 6) Mutation Subscriber Function\n    vars['subscriber_'+extension.$instance] = function(mutations) {\n      mutations.forEach(function(mutation) {\n        \n        // 7) Check if the Page where this change lives is active\n        if (optimizely.get('state').getPageStates()[window['page_'+extension.$instance]].isActive) {\n\n          // 8) If the Page where this change lives is active, check if previously inserted HTML is still there if not, re-apply change\n          if (!document.querySelector('[optly-change-'+extension.$instance+']')) {\n            insertHtml();    \n          }\n        }\n\n        // 9) If the Page where this change lives is not active, disconnect MutationObserver (for later on)\n        else {\n          vars['observer_'+extension.$instance].disconnect();\n        }\n      });\n    };\n\n    // 10) Activate Mutation Observer\n    vars['observer_'+extension.$instance] = new MutationObserver(vars['subscriber_'+extension.$instance]);\n    vars['observer_'+extension.$instance].observe(vars['target_'+extension.$instance], vars['config_'+extension.$instance]);\n  });\n}",
    "html": "<div id=\"optimizely-extension-{{ extension.$instance }}\" class=\"insert-elements-for-spas\">\n  {{ extension.text }}\n</div>",
    "css": ".insert-elements-for-spas {\n  background-color: #fff575;\n  border-bottom: 1px solid #e0d769;\n  color: #555;\n  padding: 10px;\n  font-weight: bold;\n  text-align: center;\n  font-size: 20px;\n}",
    "undo_js": "var extensionHTML = document.querySelector('#optimizely-widget-' + widget.$instance);\nif(extensionHTML) extensionHTML.remove();"
  }
}
